openapi: 3.1.0
info:
  title: Redot Engine Backend
  version: 1.0.0
  contact:
    name: Redot Community
    url: https://discord.gg/redot
    email: redotengine@gmail.com
  description: |
    This documentation does not include a method for testing our API. To make testing easier, we recommend using the following tools:

    - [cURL](https://curl.se/) (âœ… Recommended)
    - [HTTPie](https://httpie.io/) (âœ… Recommended)  
    - [Postman](https://www.postman.com/downloads/) (âœ… Recommended)
    - [ReqBIN](https://reqbin.com/) (ðŸ›œ Online)
    - [Insomnia](https://insomnia.rest/)
    - Your web browser, suitable for simple requests without headers or a request body.

    ## Rate Limits
    
    The API enforces rate limits on a per-IP basis. These limits and their current status are communicated through the response headers:
    
      - `X-Ratelimit-Limit`: The maximum number of requests allowed per minute.
      - `X-Ratelimit-Remaining`: The number of requests left in the current rate limit window.
      - `X-Ratelimit-Reset`: The time in seconds until the rate limit window resets.
      
    Rate limits apply equally regardless of whether a token is used. The current limit is set at **300 requests per minute**.
      
    If your use case requires a higher limit, feel free to [contact us](mailto:redotengine@gmail.com).

    ## User Agents
      
    To access the Redot API, you **must** provide a uniquely identifiable `User-Agent` header. Using a generic user agent that only identifies your HTTP client library (e.g., `"okhttp/4.9.3"`) significantly increases the likelihood of your traffic being blocked.
      
    ### Recommendations:
    Including contact information in your user agent is optional but highly recommended. This allows us to reach out regarding potential changes to your application's behavior without needing to block your traffic.
    
    #### Examples:
    - **Bad:** `User-Agent: okhttp/4.9.3`
    - **Good:** `User-Agent: project_name`
    - **Better:** `User-Agent: github_username/project_name/1.0.0`
    - **Best:** `User-Agent: github_username/project_name/1.0.0 (redotengine.org)` or `User-Agent: github_username/project_name/1.0.0 (contact@redotengine.org)`
servers:
  - url: https://api.redotengine.org/api/v1
    description: Production server
tags:
  - name: Versions
    description: Endpoints related to engine versions.
paths:
  /version/latest:
    get:
      tags:
        - Versions
      summary: Get the latest version
      description: Fetch the latest version of the engine, optionally filtered by version type (e.g., release, beta, alpha).
      parameters:
        - $ref: "#/components/parameters/VersionType"
      responses:
        "200":
          description: Latest version retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseVersion"
        "400":
          description: Invalid query parameters
  /version:
    get:
      tags:
        - Versions
      summary: Get a list of all versions
      description: Fetch all available versions of the engine with sorting and pagination.
      parameters:
        - $ref: "#/components/parameters/VersionType"
        - $ref: "#/components/parameters/VersionIndex"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
      responses:
        "200":
          description: A list of versions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseVersion"
        "400":
          description: Invalid query parameters
    post:
      tags:
        - Versions
      summary: Create a new version
      description: Create a new version of the engine.
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateVersion"
      responses:
        "200":
          description: Version created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseVersion"
        "400":
          description: Invalid input
        "403":
          description: Forbidden - You are not authorized to create this version.
  /version/{id}:
    parameters:
      - $ref: "#/components/parameters/VersionIdentifier"
    get:
      tags:
        - Versions
      summary: Get a specific version by ID
      description: Fetch a specific version of the engine by its ID.
      responses:
        "200":
          description: The specified version retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BaseVersion"
        "404":
          description: Version not found
    delete:
      tags:
        - Versions
      summary: Delete a specific version by ID
      description: Delete a specific version of the engine by its ID.
      security:
        - apiKeyAuth: []
      responses:
        "200":
          description: Version deleted successfully
        "404":
          description: Version not found
        "403":
          description: Forbidden - User does not have permission to delete this version
    patch:
      tags:
        - Versions
      summary: Modify a specific version by ID
      description: Modify a specific version of the engine by its ID.
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BaseVersion"
      responses:
        "200":
          description: Version modified successfully
        "400":
          description: Invalid input
        "404":
          description: Version not found
        "403":
          description: Forbidden - User does not have permission to modify this version
  /version/{id}/file:
    post:
      tags:
        - Versions
      summary: Upload a file to a specific version
      description: Upload a file to the specified version by its ID.
      security:
        - apiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/VersionIdentifier"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
                file_part:
                  type: string
                  description: The multipart field name of the file for this version
                  example: "exampleFilePart"
              required:
                - file
                - file_part
  /versions:
    get:
      tags:
        - Versions
      summary: Get multiple versions by their IDs
      description: Fetch multiple versions of the engine by their IDs.
      parameters:
        - name: ids
          in: query
          description: List of version IDs to fetch
          required: true
          schema:
            type: array
            items:
              type: string
            example:
              - uohlw2d5lfh5pdgaavtsw9v6
              - a2df73h5g8i7j1kl4m5np9p2
      responses:
        "200":
          description: A list of versions matching the provided IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BaseVersion"
        "400":
          description: Invalid query parameters
        "404":
          description: One or more versions not found
components:
  parameters:
    Offset:
      name: offset
      in: query
      description: The offset for pagination, specifying how many items to skip.
      required: false
      schema:
        type: integer
        default: 0
        example: 20
    Limit:
      name: limit
      in: query
      description: The number of versions to return, with a maximum limit.
      required: false
      schema:
        type: integer
        default: 10
        maximum: 100
        example: 20
    VersionIdentifier:
      name: id
      in: path
      required: true
      description: Unique identifier for the version
      schema:
        type: string
        example: uohlw2d5lfh5pdgaavtsw9v6
    VersionType:
      name: version_type
      in: query
      description: Optionally filter by version type (e.g., release, beta, alpha). Defaults to "release".
      required: false
      schema:
        type: string
        enum:
          - release
          - beta
          - alpha
        example: release
    VersionIndex:
      name: index
      in: query
      description: Sort the list of versions by a specific criterion.
      required: false
      schema:
        type: string
        enum:
          - relevance
          - downloads
          - newest
          - updated
        default: newest
        example: newest
  schemas:
    BaseVersion:
      type: object
      properties:
        name:
          type: string
          description: "Name of the version"
          example: "Version 1.0.0"
        version_number:
          type: string
          description: "The version number. Ideally will follow semantic versioning"
          example: "1.0.0"
          changelog:
            type: string
            description: "The changelog for this version"
            example: "List of changes in this version..."
            nullable: true
          changelog_url:
            type: string
            description: "A direct URL to the changelog for this version"
            example: "https://example.com/changelog"
            nullable: true
        version_type:
          type: string
          description: The release channel for this version
          enum:
            - release
            - beta
            - alpha
          example: release
        status:
          type: string
          description: The current status of the version
          enum:
            - listed
            - archived
            - draft
            - unlisted
            - scheduled
            - unknown
          example: listed
    CreatableVersion:
      allOf:
        - $ref: "#/components/schemas/BaseVersion"
        - type: object
          properties:
            github_release_url:
              type: string
              description:
          required:
            - name
            - version_number
            - status
            - version_type
            - github_release_url
  CreateVersionBody:
    type: object
    properties:
      data:
        $ref: "#/components/schemas/CreatableVersion"
    required: [ data ]
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key authentication for authorized requests.
